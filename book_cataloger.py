import streamlit as st
import cv2
import numpy as np
from pyzbar import pyzbar
# pytesseract removido - n√£o √© necess√°rio para este sistema
from PIL import Image
import re
import requests
import csv
import os
from datetime import datetime
import pandas as pd
from difflib import SequenceMatcher
import unidecode
import socket
import subprocess
import openai
import json
import configparser

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Cataloga√ß√£o de Livros - Captura por C√¢mera",
    page_icon="üìö",
    layout="wide"
)

# Fun√ß√µes para gerenciar configura√ß√£o persistente
def load_config():
    """Carrega configura√ß√µes do arquivo config.ini"""
    config = configparser.ConfigParser()
    config_file = "config.ini"
    
    if os.path.exists(config_file):
        config.read(config_file, encoding='utf-8')
        model = config.get("openrouter", "model", fallback="openai/gpt-3.5-turbo")
        # Adicionar emoji de volta se for um modelo que suporta tools
        if any(tool_model in model for tool_model in ["gemma", "gpt-4", "claude-3"]):
            model += " üîç"
        return {
            "api_key": config.get("openrouter", "api_key", fallback=""),
            "model": model,
            "enabled": config.getboolean("openrouter", "enabled", fallback=False)
        }
    else:
        return {
            "api_key": "",
            "model": "openai/gpt-3.5-turbo",
            "enabled": False
        }

def save_config(api_key, model, enabled):
    """Salva configura√ß√µes no arquivo config.ini"""
    config = configparser.ConfigParser()
    config_file = "config.ini"
    
    # Criar se√ß√£o openrouter
    if not config.has_section("openrouter"):
        config.add_section("openrouter")
    
    # Remover emojis do nome do modelo antes de salvar
    clean_model = model.replace(" üîç", "").strip()
    
    config.set("openrouter", "api_key", api_key)
    config.set("openrouter", "model", clean_model)
    config.set("openrouter", "enabled", str(enabled))
    
    # Salvar arquivo com codifica√ß√£o UTF-8
    with open(config_file, 'w', encoding='utf-8') as f:
        config.write(f)
    
    # Atualizar session_state
    st.session_state.openrouter_config = {
        "api_key": api_key,
        "model": model,  # Manter o modelo original com emoji no session_state
        "enabled": enabled
    }

# Fun√ß√µes auxiliares para otimiza√ß√£o de pesquisa local
def similarity(a, b):
    """Calcula similaridade entre duas strings"""
    return SequenceMatcher(None, a.lower(), b.lower()).ratio()

def normalize_text(text):
    """Normaliza texto removendo acentos e caracteres especiais"""
    if pd.isna(text) or text == "N/A":
        return ""
    return unidecode.unidecode(str(text).lower().strip())

def find_similar_books(query, field="title", threshold=0.6):
    """Encontra livros similares baseado em um campo espec√≠fico"""
    df = load_catalog_data()
    if df.empty:
        return []
    
    # Mapear nomes de campos para colunas do DataFrame
    field_mapping = {
        "title": "Titulo",
        "author": "Autor", 
        "publisher": "Editora",
        "genre": "Genero",
        "barcode": "Codigo_Barras"
    }
    
    # Usar o nome correto da coluna
    actual_field = field_mapping.get(field, field)
    
    # Verificar se a coluna existe
    if actual_field not in df.columns:
        return []
    
    query_norm = normalize_text(query)
    similar_books = []
    
    for _, row in df.iterrows():
        field_value = normalize_text(row[actual_field])
        if field_value:
            sim = similarity(query_norm, field_value)
            if sim >= threshold:
                similar_books.append({
                    "similarity": sim,
                    "data": row.to_dict()
                })
    
    # Ordenar por similaridade
    similar_books.sort(key=lambda x: x["similarity"], reverse=True)
    return similar_books[:5]  # Retornar top 5

def get_autocomplete_suggestions(partial_text, field="title"):
    """Gera sugest√µes de auto-complete baseadas em texto parcial"""
    df = load_catalog_data()
    if df.empty or not partial_text:
        return []
    
    # Mapear nomes de campos para colunas do DataFrame
    field_mapping = {
        "title": "Titulo",
        "author": "Autor", 
        "publisher": "Editora",
        "genre": "Genero",
        "barcode": "Codigo_Barras"
    }
    
    # Usar o nome correto da coluna
    actual_field = field_mapping.get(field, field)
    
    # Verificar se a coluna existe
    if actual_field not in df.columns:
        return []
    
    partial_norm = normalize_text(partial_text)
    suggestions = []
    
    for _, row in df.iterrows():
        field_value = normalize_text(row[actual_field])
        if field_value and partial_norm in field_value:
            suggestions.append({
                "text": row[actual_field],
                "data": row.to_dict()
            })
    
    # Remover duplicatas e ordenar
    unique_suggestions = []
    seen = set()
    for suggestion in suggestions:
        if suggestion["text"] not in seen:
            unique_suggestions.append(suggestion)
            seen.add(suggestion["text"])
    
    return unique_suggestions[:10]  # M√°ximo 10 sugest√µes

def get_all_unique_values(field="title"):
    """Obt√©m todos os valores √∫nicos de um campo para autocomplete"""
    df = load_catalog_data()
    if df.empty:
        return []
    
    # Mapear nomes de campos para colunas do DataFrame
    field_mapping = {
        "title": "Titulo",
        "author": "Autor", 
        "publisher": "Editora",
        "genre": "Genero",
        "barcode": "Codigo_Barras"
    }
    
    # Usar o nome correto da coluna
    actual_field = field_mapping.get(field, field)
    
    # Verificar se a coluna existe
    if actual_field not in df.columns:
        return []
    
    # Obter valores √∫nicos n√£o nulos
    unique_values = df[actual_field].dropna().unique().tolist()
    
    # Filtrar valores vazios e ordenar
    unique_values = [v for v in unique_values if v and str(v).strip() != ""]
    unique_values.sort()
    
    return unique_values[:50]  # M√°ximo 50 sugest√µes

def create_autocomplete_widget(field_name, field_key, current_value="", help_text=""):
    """Cria um widget de autocomplete para um campo espec√≠fico"""
    # Garantir que current_value seja string
    current_value = str(current_value) if current_value else ""
    
    # Se h√° valor atual (dados da API), usar text_input para garantir preenchimento
    if current_value and current_value.strip():
        return st.text_input(
            f"{field_name} *:",
            value=current_value,
            help=f"{help_text} Campo obrigat√≥rio - Valor preenchido automaticamente."
        )
    
    # Se n√£o h√° valor atual, usar selectbox com sugest√µes
    suggestions = get_all_unique_values(field_key)
    
    if suggestions:
        return st.selectbox(
            f"{field_name} *:",
            options=[""] + suggestions,
            help=f"{help_text} Sugest√µes baseadas em registros anteriores."
        )
    else:
        # Se n√£o h√° sugest√µes, criar text_input normal
        return st.text_input(
            f"{field_name} *:",
            value=current_value,
            help=f"{help_text} Campo obrigat√≥rio."
        )

def get_local_ip():
    """Obt√©m o IP local da m√°quina"""
    try:
        # Conecta a um endere√ßo externo para descobrir o IP local
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "192.168.1.1"  # Fallback

def scan_network_for_webcam():
    """Escaneia a rede local em busca de dispositivos com IP Webcam"""
    local_ip = get_local_ip()
    base_ip = ".".join(local_ip.split(".")[:-1])  # Remove √∫ltimo octeto
    
    st.info(f"üîç Escaneando rede {base_ip}.x em busca de IP Webcam...")
    
    found_devices = []
    progress_bar = st.progress(0)
    
    # Escaneia IPs comuns
    common_ips = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]
    
    for i, ip_num in enumerate(common_ips):
        ip = f"{base_ip}.{ip_num}"
        progress_bar.progress((i + 1) / len(common_ips))
        
        try:
            # Testa se o IP responde na porta 8080
            url = f"http://{ip}:8080/video"
            cap = cv2.VideoCapture(url)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret:
                    found_devices.append({
                        "ip": ip,
                        "url": url,
                        "status": "‚úÖ Ativo"
                    })
                cap.release()
        except:
            pass
    
    progress_bar.empty()
    return found_devices

# Fun√ß√µes de processamento de imagem (focadas apenas em c√≥digo de barras)
def process_image_for_barcode(image):
    """Processa uma imagem para extrair apenas o c√≥digo de barras"""
    # Converter para formato OpenCV
    if isinstance(image, Image.Image):
        image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
    
    # Detectar c√≥digo de barras
    barcodes = pyzbar.decode(image)
    barcode_data = None
    
    if barcodes:
        for barcode in barcodes:
            barcode_data = barcode.data.decode("utf-8")
            break
    
    return barcode_data

def detect_barcode_from_frame(frame):
    """Detecta c√≥digo de barras em um frame de v√≠deo"""
    try:
        # Converter para escala de cinza
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # Detectar c√≥digos de barras
        barcodes = pyzbar.decode(gray)
        
        for barcode in barcodes:
            # Extrair dados do c√≥digo de barras
            barcode_data = barcode.data.decode("utf-8")
            barcode_type = barcode.type
            
            # Desenhar ret√¢ngulo ao redor do c√≥digo de barras
            (x, y, w, h) = barcode.rect
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            
            # Adicionar texto
            text = f"{barcode_type}: {barcode_data}"
            cv2.putText(frame, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            
            return barcode_data, frame
    except Exception as e:
        st.error(f"Erro na detec√ß√£o de c√≥digo de barras: {e}")
    
    return None, frame

# Fun√ß√µes de busca de dados (reutilizadas da vers√£o anterior)
def translate_genre(genre):
    """Traduz g√™neros do ingl√™s para portugu√™s"""
    translations = {
        'fiction': 'fic√ß√£o',
        'non-fiction': 'n√£o-fic√ß√£o',
        'biography': 'biografia',
        'history': 'hist√≥ria',
        'science': 'ci√™ncia',
        'technology': 'tecnologia',
        'philosophy': 'filosofia',
        'psychology': 'psicologia',
        'applied': 'aplicada',
        'self-help': 'autoajuda',
        'business': 'neg√≥cios',
        'economics': 'economia',
        'politics': 'pol√≠tica',
        'religion': 'religi√£o',
        'art': 'arte',
        'music': 'm√∫sica',
        'literature': 'literatura',
        'poetry': 'poesia',
        'drama': 'drama',
        'mystery': 'mist√©rio',
        'thriller': 'suspense',
        'romance': 'romance',
        'fantasy': 'fantasia',
        'science fiction': 'fic√ß√£o cient√≠fica',
        'horror': 'terror',
        'adventure': 'aventura',
        'children': 'infantil',
        'young adult': 'jovem adulto',
        'education': 'educa√ß√£o',
        'reference': 'refer√™ncia',
        'cookbook': 'culin√°ria',
        'health': 'sa√∫de',
        'fitness': 'fitness',
        'travel': 'viagem',
        'guide': 'guia'
    }
    
    if not genre or genre.lower() == 'n/a':
        return 'N/A'
    
    genre_lower = genre.lower()
    for eng, pt in translations.items():
        if eng in genre_lower:
            genre_lower = genre_lower.replace(eng, pt)
    
    return genre_lower.title()

def search_openlibrary(barcode):
    """Busca dados na Open Library API usando o c√≥digo de barras com coleta melhorada de editora"""
    try:
        url = f"https://openlibrary.org/isbn/{barcode}.json"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            
            title = data.get('title', 'N/A')
            
            # Buscar autores
            authors = []
            if 'authors' in data:
                for author_ref in data['authors']:
                    author_key = author_ref['key']
                    author_url = f"https://openlibrary.org{author_key}.json"
                    try:
                        author_response = requests.get(author_url, timeout=5)
                        if author_response.status_code == 200:
                            author_data = author_response.json()
                            authors.append(author_data.get('name', 'N/A'))
                    except:
                        continue
            
            author = ', '.join(authors) if authors else 'N/A'
            
            # Buscar editora com mais detalhes
            publisher = 'N/A'
            if 'publishers' in data and data['publishers']:
                # Tentar buscar detalhes da editora
                publisher_key = data['publishers'][0]['key']
                publisher_url = f"https://openlibrary.org{publisher_key}.json"
                try:
                    publisher_response = requests.get(publisher_url, timeout=5)
                    if publisher_response.status_code == 200:
                        publisher_data = publisher_response.json()
                        publisher = publisher_data.get('name', data['publishers'][0].get('name', 'N/A'))
                    else:
                        publisher = data['publishers'][0].get('name', 'N/A')
                except:
                    publisher = data['publishers'][0].get('name', 'N/A')
            
            # Buscar g√™nero (subjects)
            subjects = data.get('subjects', [])
            genre = subjects[0] if subjects else 'N/A'
            genre = translate_genre(genre)
            
            return {
                'title': title,
                'author': author,
                'publisher': publisher,
                'genre': genre,
                'source': 'Open Library'
            }
    except Exception as e:
        st.error(f"Erro ao buscar na Open Library: {e}")
    return None

def search_google_books(barcode):
    """Busca dados na Google Books API usando o c√≥digo de barras"""
    try:
        url = f"https://www.googleapis.com/books/v1/volumes?q=isbn:{barcode}"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if 'items' in data and len(data['items']) > 0:
                book = data['items'][0]['volumeInfo']
                
                title = book.get('title', 'N/A')
                authors = book.get('authors', [])
                author = ', '.join(authors) if authors else 'N/A'
                publisher = book.get('publisher', 'N/A')
                
                categories = book.get('categories', [])
                genre = categories[0] if categories else 'N/A'
                genre = translate_genre(genre)
                
                return {
                    'title': title,
                    'author': author,
                    'publisher': publisher,
                    'genre': genre,
                    'source': 'Google Books'
                }
    except Exception as e:
        st.error(f"Erro ao buscar no Google Books: {e}")
    return None

def search_google_books_by_title(title):
    """Busca dados na Google Books API usando o t√≠tulo"""
    try:
        url = f"https://www.googleapis.com/books/v1/volumes?q=intitle:{title}"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("totalItems", 0) > 0:
                book = data["items"][0]["volumeInfo"]
                
                return {
                    "title": book.get("title", "N/A"),
                    "author": ", ".join(book.get("authors", ["N/A"])),
                    "publisher": book.get("publisher", "N/A"),
                    "genre": translate_genre(", ".join(book.get("categories", ["N/A"]))),
                    "source": "Google Books (T√≠tulo)"
                }
    except Exception as e:
        st.error(f"Erro ao buscar no Google Books (T√≠tulo): {e}")
    return None

def search_worldcat(barcode):
    """Busca dados na WorldCat API usando o c√≥digo de barras"""
    try:
        # WorldCat OpenSearch API
        url = f"http://www.worldcat.org/webservices/catalog/content/{barcode}?wskey=YOUR_KEY&format=json"
        # Como n√£o temos chave, vamos usar uma abordagem alternativa
        # Buscar via Open Library que tem integra√ß√£o com WorldCat
        return None
    except Exception as e:
        return None

def search_isbn_org(barcode):
    """Busca dados no ISBN.org usando o c√≥digo de barras"""
    try:
        # ISBN.org n√£o tem API p√∫blica, mas podemos tentar scraping b√°sico
        # Por enquanto, retornamos None
        return None
    except Exception as e:
        return None

def search_goodreads(barcode):
    """Busca dados na Goodreads API usando o c√≥digo de barras"""
    try:
        # Goodreads API requer chave, mas podemos tentar uma busca alternativa
        # Usar Open Library que tem dados do Goodreads
        return None
    except Exception as e:
        return None

def search_amazon_books(barcode):
    """Busca dados na Amazon usando o c√≥digo de barras (via scraping limitado)"""
    try:
        # Amazon n√£o permite scraping, mas podemos tentar via APIs de terceiros
        # Por enquanto, retornamos None
        return None
    except Exception as e:
        return None

def search_openlibrary_works(barcode):
    """Busca dados adicionais na Open Library via works"""
    try:
        # Primeiro buscar o ISBN
        url = f"https://openlibrary.org/isbn/{barcode}.json"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            
            # Buscar works para mais detalhes
            if 'works' in data and data['works']:
                work_key = data['works'][0]['key']
                work_url = f"https://openlibrary.org{work_key}.json"
                work_response = requests.get(work_url, timeout=10)
                
                if work_response.status_code == 200:
                    work_data = work_response.json()
                    
                    # Buscar editora mais detalhada
                    publisher = 'N/A'
                    if 'publishers' in work_data and work_data['publishers']:
                        publisher_key = work_data['publishers'][0]['key']
                        publisher_url = f"https://openlibrary.org{publisher_key}.json"
                        try:
                            publisher_response = requests.get(publisher_url, timeout=5)
                            if publisher_response.status_code == 200:
                                publisher_data = publisher_response.json()
                                publisher = publisher_data.get('name', 'N/A')
                        except:
                            publisher = work_data['publishers'][0].get('name', 'N/A')
                    
                    return {
                        'title': work_data.get('title', 'N/A'),
                        'publisher': publisher,
                        'source': 'Open Library Works'
                    }
    except Exception as e:
        return None
    return None

def search_local_catalog_first(barcode):
    """Busca primeiro no cat√°logo local, depois nas APIs se necess√°rio"""
    # 1. PRIMEIRO: Verificar se j√° existe no cat√°logo local
    local_matches = check_existing_records(barcode=barcode)
    
    if local_matches:
        # Livro j√° existe no cat√°logo local
        local_data = local_matches[0]  # Pegar o primeiro match
        return {
            'title': local_data.get('Titulo', 'N/A'),
            'author': local_data.get('Autor', 'N/A'),
            'publisher': local_data.get('Editora', 'N/A'),
            'genre': local_data.get('Genero', 'N/A'),
            'sources': ['cat√°logo_local'],
            'from_local': True
        }
    
    # 2. SEGUNDO: Se n√£o existe localmente, buscar nas APIs
    return search_multiple_sources(barcode)

def search_multiple_sources(barcode):
    """Busca dados em m√∫ltiplas fontes usando o c√≥digo de barras com coleta melhorada de editora"""
    # Fontes principais
    primary_sources = [search_openlibrary, search_google_books]
    # Fontes adicionais para editora
    additional_sources = [search_openlibrary_works]
    
    combined_data = {
        'title': 'N/A',
        'author': 'N/A',
        'publisher': 'N/A',
        'genre': 'N/A',
        'sources': [],
        'from_local': False
    }
    
    # Buscar nas fontes principais
    for search_func in primary_sources:
        result = search_func(barcode)
        if result:
            combined_data['sources'].append(result['source'])
            for key in ['title', 'author', 'publisher', 'genre']:
                if combined_data[key] == 'N/A' and result[key] != 'N/A':
                    combined_data[key] = result[key]
    
    # Se n√£o encontrou editora, tentar fontes adicionais
    if combined_data['publisher'] == 'N/A':
        for search_func in additional_sources:
            result = search_func(barcode)
            if result and result.get('publisher', 'N/A') != 'N/A':
                combined_data['publisher'] = result['publisher']
                combined_data['sources'].append(result['source'])
                break
    
    # Se ainda n√£o encontrou editora e tem t√≠tulo, tentar busca por t√≠tulo
    if combined_data['publisher'] == 'N/A' and combined_data['title'] != 'N/A':
        title_result = search_google_books_by_title(combined_data['title'])
        if title_result and title_result.get('publisher', 'N/A') != 'N/A':
            combined_data['publisher'] = title_result['publisher']
            combined_data['sources'].append(title_result['source'])
    
    return combined_data

# Fun√ß√µes de otimiza√ß√£o de pesquisa local
@st.cache_data(ttl=3600) # Cache por 1 hora
def load_catalog_data():
    csv_file = "catalogo_livros.csv"
    if os.path.exists(csv_file):
        try:
            return pd.read_csv(csv_file)
        except pd.errors.EmptyDataError:
            return pd.DataFrame(columns=["Codigo_Barras", "Titulo", "Autor", "Editora", "Genero", "Data_Catalogacao"])
    return pd.DataFrame(columns=["Codigo_Barras", "Titulo", "Autor", "Editora", "Genero", "Data_Catalogacao"])

def check_existing_records(barcode=None, title=None):
    """Verifica registros existentes no CSV"""
    df = load_catalog_data()
    matches = []
    
    try:
        if barcode:
            # Busca exata por c√≥digo de barras
            exact_matches = df[df["Codigo_Barras"] == barcode]
            if not exact_matches.empty:
                for _, row in exact_matches.iterrows():
                    matches.append({
                        "tipo": "C√≥digo de Barras Exato",
                        "similaridade": 1.0,
                        "dados": row.to_dict()
                    })
        
        if title and not matches:
            # Busca por t√≠tulo similar
            title_norm = normalize_text(title)
            for _, row in df.iterrows():
                existing_title_norm = normalize_text(row["Titulo"])
                if existing_title_norm:
                    sim = similarity(title_norm, existing_title_norm)
                    if sim >= 0.8:  # 80% de similaridade
                        matches.append({
                            "tipo": "T√≠tulo Similar",
                            "similaridade": sim,
                            "dados": row.to_dict()
                        })
        
        # Ordenar por similaridade
        matches.sort(key=lambda x: x["similaridade"], reverse=True)
        return matches[:3]  # Retornar apenas os 3 melhores matches
        
    except Exception as e:
        st.error(f"Erro ao verificar registros existentes: {e}")
        return []

def save_to_csv(data, quantity=1):
    """Salva os dados no arquivo CSV, repetindo o registro conforme a quantidade"""
    csv_file = 'catalogo_livros.csv'
    file_exists = os.path.isfile(csv_file)
    
    with open(csv_file, 'a', newline='', encoding='utf-8') as file:
        fieldnames = ['Codigo_Barras', 'Titulo', 'Autor', 'Editora', 'Genero', 'Data_Catalogacao']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        
        if not file_exists:
            writer.writeheader()
        
        # Repetir o registro conforme a quantidade especificada
        for i in range(quantity):
            writer.writerow({
                'Codigo_Barras': data['barcode'],
                'Titulo': data['title'],
                'Autor': data['author'],
                'Editora': data['publisher'],
                'Genero': data['genre'],
                'Data_Catalogacao': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            })
    load_catalog_data.clear() # Invalida o cache ap√≥s salvar no CSV

# Op√ß√µes de g√™neros dispon√≠veis
GENEROS_DISPONIVEIS = [
    "Poesia", "Literatura de Cordel", "Biografia", "Autobiografia", "Di√°logo",
    "H√°bito", "Psicologia", "Cultura Afro-brasileira", "Hist√≥ria", "Teatro",
    "Educa√ß√£o", "Romance", "Fic√ß√£o", "Fantasia", "Mitologia", "Literatura Infantil",
    "Adolescentes", "Infantojuvenil", "Suspense", "Lenda", "Folclore", "Novela",
    "F√°bula", "Narrativa", "Afetividade", "Letramento", "Filosofia",
    "Pol√≠tica", "Culin√°ria", "Cr√¥nica", "Conto", "Didatico"
]

def get_openrouter_config():
    """Obt√©m configura√ß√£o do OpenRouter do arquivo config.ini"""
    if "openrouter_config" not in st.session_state:
        # Carregar configura√ß√£o do arquivo
        config = load_config()
        st.session_state.openrouter_config = config
    return st.session_state.openrouter_config

def suggest_genre_with_llm(book_data):
    """Sugere g√™nero automaticamente para um livro usando LLM via OpenRouter"""
    config = get_openrouter_config()
    
    if not config["enabled"] or not config["api_key"]:
        return None
    
    try:
        # Usar requests diretamente para evitar problemas de proxy
        import requests
        import json
        
        # Configurar sess√£o com headers apropriados e configura√ß√µes robustas
        session = requests.Session()
        session.headers.update({
            'Authorization': f'Bearer {config["api_key"]}',
            'Content-Type': 'application/json',
            'User-Agent': 'Book-Cataloger/1.0',
            'Accept': 'application/json',
            'Connection': 'keep-alive'
        })
        
        # Configurar adapter com retry e timeout
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry
        
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        
        # Preparar prompt para sugest√£o de g√™nero
        prompt = f"""
Analise o seguinte livro e sugira o g√™nero mais adequado:

T√≠tulo: {book_data.get('title', 'N/A')}
Autor: {book_data.get('author', 'N/A')}
Editora: {book_data.get('publisher', 'N/A')}
G√™nero atual: {book_data.get('genre', 'N/A')}

G√™neros dispon√≠veis:
{', '.join(GENEROS_DISPONIVEIS)}

Considere:
- O t√≠tulo do livro
- O autor e sua obra conhecida
- A editora e seu perfil
- O g√™nero atual (se dispon√≠vel)
- O contexto cultural brasileiro

Responda APENAS com o nome do g√™nero mais adequado, sem explica√ß√µes adicionais.
"""
        
        # Preparar payload para OpenRouter
        # Remover emoji do nome do modelo
        model_name = config["model"].replace(" üîç", "").strip()
        payload = {
            "model": model_name,
            "messages": [
                {"role": "system", "content": "Voc√™ √© um especialista em classifica√ß√£o de g√™neros liter√°rios brasileiros. Analise os dados fornecidos e sugira o g√™nero mais adequado da lista fornecida."},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 100,
            "temperature": 0.3
        }

        # Fazer chamada direta para OpenRouter com configura√ß√µes robustas
        try:
            response = session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                json=payload,
                timeout=(10, 30),  # (connect timeout, read timeout)
                verify=True,
                allow_redirects=True
            )
        except requests.exceptions.ConnectionError as e:
            st.error(f"‚ùå Erro de conex√£o: {str(e)}")
            return None
        except requests.exceptions.Timeout as e:
            st.error(f"‚ùå Timeout na conex√£o: {str(e)}")
            return None
        except requests.exceptions.RequestException as e:
            st.error(f"‚ùå Erro na requisi√ß√£o: {str(e)}")
            return None
        
        if response.status_code == 200:
            result = response.json()
            genero_sugerido = result['choices'][0]['message']['content'].strip()
        else:
            st.error(f"Erro na API: {response.status_code} - {response.text}")
            return None
        
        # Verificar se o g√™nero est√° na lista
        if genero_sugerido in GENEROS_DISPONIVEIS:
            return genero_sugerido
        else:
            # Tentar encontrar o g√™nero mais similar
            from difflib import get_close_matches
            matches = get_close_matches(genero_sugerido, GENEROS_DISPONIVEIS, n=1, cutoff=0.6)
            if matches:
                return matches[0]
            else:
                return None  # Deixar em branco para preenchimento manual
            
    except Exception as e:
        st.error(f"Erro na sugest√£o autom√°tica de g√™nero: {str(e)}")
        return None

def search_additional_context(book_data):
    """Busca contexto adicional para melhorar a categoriza√ß√£o"""
    try:
        # Buscar informa√ß√µes adicionais no Google Books
        title = book_data.get('title', '')
        author = book_data.get('author', '')
        
        if not title:
            return ""
        
        # Construir query de busca
        query = f"{title} {author}".strip()
        
        # Fazer busca no Google Books
        url = "https://www.googleapis.com/books/v1/volumes"
        params = {
            "q": query,
            "maxResults": 1,
            "langRestrict": "pt"
        }
        
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get("items"):
                item = data["items"][0]
                volume_info = item.get("volumeInfo", {})
                
                # Extrair informa√ß√µes relevantes
                context_parts = []
                
                if volume_info.get("description"):
                    context_parts.append(f"Descri√ß√£o: {volume_info['description'][:200]}...")
                
                if volume_info.get("categories"):
                    context_parts.append(f"Categorias: {', '.join(volume_info['categories'])}")
                
                if volume_info.get("subtitle"):
                    context_parts.append(f"Subt√≠tulo: {volume_info['subtitle']}")
                
                return " | ".join(context_parts)
        
        return ""
        
    except Exception as e:
        return ""

# Interface principal
def main():
    st.title("üìö Cataloga√ß√£o de Livros - C√≥digo de Barras")
    st.markdown("---")
    
    # Inicializar vari√°veis de session_state
    if "from_autocomplete" not in st.session_state:
        st.session_state.from_autocomplete = False
    if "force_search" not in st.session_state:
        st.session_state.force_search = False
    if "codigo_barras" not in st.session_state:
        st.session_state.codigo_barras = None
    if "dados_livro" not in st.session_state:
        st.session_state.dados_livro = None
    if "sources_used" not in st.session_state:
        st.session_state.sources_used = []
    if "openrouter_config" not in st.session_state:
        st.session_state.openrouter_config = load_config()
    if "from_local" not in st.session_state:
        st.session_state.from_local = False
    
    # Sidebar para navega√ß√£o
    with st.sidebar:
        st.header("üìã Menu")
        page = st.selectbox("Escolha uma op√ß√£o:", [
            "üì∑ Capturar C√≥digo de Barras",
            "üîç Buscar Livros",
            "üìä Visualizar Cat√°logo",
            "üì• Download CSV",
            "‚öôÔ∏è Configura√ß√µes"
        ])
    
    # Configura√ß√µes do OpenRouter
    if page == "‚öôÔ∏è Configura√ß√µes":
        st.title("‚öôÔ∏è Configura√ß√µes do Sistema")
        st.markdown("---")
        
        config = get_openrouter_config()
        
        st.markdown("### ü§ñ Sugest√£o Autom√°tica de G√™nero")
        st.info("Configure a API do OpenRouter para sugest√£o autom√°tica de g√™neros liter√°rios usando IA.")
        
        # Configura√ß√£o da API
        with st.expander("üîë Configura√ß√£o da API OpenRouter", expanded=True):
            config["enabled"] = st.checkbox("Ativar sugest√£o autom√°tica de g√™nero", value=config["enabled"])
            
            if config["enabled"]:
                config["api_key"] = st.text_input(
                    "API Key do OpenRouter:", 
                    value=config["api_key"], 
                    type="password",
                    help="Obtenha sua API key em: https://openrouter.ai/keys"
                )
                
                # Sele√ß√£o do modelo
                modelos_disponiveis = [
                    "openai/gpt-3.5-turbo",
                    "openai/gpt-4 üîç",
                    "openai/gpt-4-turbo üîç",
                    "anthropic/claude-3-haiku",
                    "anthropic/claude-3-sonnet",
                    "google/gemini-pro",
                    "google/gemma-3-27b-it üîç",
                    "meta-llama/llama-2-70b-chat",
                    "mistralai/mistral-7b-instruct"
                ]
                
                config["model"] = st.selectbox(
                    "Modelo de IA:",
                    modelos_disponiveis,
                    index=modelos_disponiveis.index(config["model"]) if config["model"] in modelos_disponiveis else 0,
                    help="Escolha o modelo de linguagem para sugest√£o de g√™nero. Modelos com üîç suportam tools de pesquisa."
                )
                
        # Mostrar informa√ß√µes sobre suporte a tools
        model_name = config["model"].replace(" üîç", "").lower()
        if "gemma" in model_name or "gpt-4" in model_name:
            st.success("üîç **Este modelo suporta tools de pesquisa!** O sistema pode buscar informa√ß√µes adicionais sobre livros para melhorar a precis√£o da classifica√ß√£o de g√™neros.")
        else:
            st.info("‚ÑπÔ∏è Este modelo usa apenas os dados fornecidos para classifica√ß√£o de g√™neros.")
        
        # Informa√ß√µes sobre configura√ß√£o persistente
        with st.expander("üíæ Configura√ß√£o Persistente", expanded=True):
            st.markdown("""
            **Sistema de Configura√ß√£o Autom√°tica:**
            - **üíæ Salvar**: Salva suas credenciais no arquivo `config.ini`
            - **üîÑ Carregar**: Carrega configura√ß√µes salvas automaticamente
            - **üóëÔ∏è Limpar**: Remove configura√ß√µes salvas
            
            **Vantagens:**
            - ‚úÖ N√£o precisa inserir credenciais toda vez
            - ‚úÖ Configura√ß√µes persistem entre sess√µes
            - ‚úÖ Arquivo `config.ini` fica no diret√≥rio do projeto
            - ‚úÖ Seguro e local (n√£o enviado para nuvem)
            
            **Como usar:**
            1. Configure sua API key e modelo
            2. Clique em "üíæ Salvar Configura√ß√£o"
            3. Na pr√≥xima vez, clique em "üîÑ Carregar Configura√ß√£o"
            """)
        
        # Mostrar fontes de consulta dispon√≠veis
        with st.expander("üìö Fontes de Consulta Dispon√≠veis"):
            st.markdown("""
            **Fontes Principais:**
            - **Open Library**: Base de dados livre com informa√ß√µes detalhadas de livros
            - **Google Books**: API do Google com metadados de livros
            
            **Fontes Adicionais para Editora:**
            - **Open Library Works**: Busca detalhada de editoras via works
            - **Google Books (T√≠tulo)**: Busca por t√≠tulo como fallback
            
            **Fontes Futuras (requerem chaves de API):**
            - **WorldCat**: Cat√°logo mundial de bibliotecas
            - **Goodreads**: Rede social de livros
            - **ISBN.org**: Base oficial de ISBNs
            
            **Melhorias Implementadas:**
            - ‚úÖ Coleta detalhada de editora via Open Library
            - ‚úÖ Busca por t√≠tulo como fallback
            - ‚úÖ M√∫ltiplas tentativas de coleta de editora
            - ‚úÖ Integra√ß√£o com works da Open Library
            """)
        
        # Bot√µes de gerenciamento de configura√ß√£o
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ Salvar Configura√ß√£o"):
                # Remover emoji do modelo antes de salvar
                clean_model = config["model"].replace(" üîç", "").strip()
                save_config(config["api_key"], clean_model, config["enabled"])
                st.success("‚úÖ Configura√ß√£o salva com sucesso!")
                st.rerun()
        
        with col2:
            if st.button("üîÑ Carregar Configura√ß√£o"):
                loaded_config = load_config()
                st.session_state.openrouter_config = loaded_config
                st.success("‚úÖ Configura√ß√£o carregada com sucesso!")
                st.rerun()
        
        with col3:
            if st.button("üóëÔ∏è Limpar Configura√ß√£o"):
                if os.path.exists("config.ini"):
                    os.remove("config.ini")
                st.session_state.openrouter_config = {
                    "api_key": "",
                    "model": "openai/gpt-3.5-turbo",
                    "enabled": False
                }
                st.success("‚úÖ Configura√ß√£o limpa com sucesso!")
                st.rerun()
        
        st.markdown("---")
        
        # Teste da configura√ß√£o
        if st.button("üß™ Testar Conex√£o"):
            if config["api_key"]:
                with st.spinner("Testando conex√£o..."):
                    try:
                        # Usar requests diretamente para evitar problemas de proxy
                        import requests
                        
                        # Configurar sess√£o com headers apropriados e configura√ß√µes robustas
                        session = requests.Session()
                        session.headers.update({
                            'Authorization': f'Bearer {config["api_key"]}',
                            'Content-Type': 'application/json',
                            'User-Agent': 'Book-Cataloger/1.0',
                            'Accept': 'application/json',
                            'Connection': 'keep-alive'
                        })
                        
                        # Configurar adapter com retry e timeout
                        from requests.adapters import HTTPAdapter
                        from urllib3.util.retry import Retry
                        
                        retry_strategy = Retry(
                            total=3,
                            backoff_factor=1,
                            status_forcelist=[429, 500, 502, 503, 504],
                        )
                        adapter = HTTPAdapter(max_retries=retry_strategy)
                        session.mount("http://", adapter)
                        session.mount("https://", adapter)
                        
                        # Preparar payload para teste
                        # Remover emoji do nome do modelo
                        model_name = config["model"].replace(" üîç", "").strip()
                        payload = {
                            "model": model_name,
                            "messages": [{"role": "user", "content": "Teste de conex√£o"}],
                            "max_tokens": 10,
                            "temperature": 0.3
                        }
                        
                        # Fazer chamada direta para OpenRouter com configura√ß√µes robustas
                        try:
                            response = session.post(
                                "https://openrouter.ai/api/v1/chat/completions",
                                json=payload,
                                timeout=(10, 30),  # (connect timeout, read timeout)
                                verify=True,
                                allow_redirects=True
                            )
                        except requests.exceptions.ConnectionError as e:
                            st.error(f"‚ùå Erro de conex√£o: {str(e)}")
                            return
                        except requests.exceptions.Timeout as e:
                            st.error(f"‚ùå Timeout na conex√£o: {str(e)}")
                            return
                        except requests.exceptions.RequestException as e:
                            st.error(f"‚ùå Erro na requisi√ß√£o: {str(e)}")
                            return
                        
                        if response.status_code == 200:
                            st.success("‚úÖ Conex√£o estabelecida com sucesso!")
                        else:
                            st.error(f"‚ùå Erro na API: {response.status_code} - {response.text}")
                    except Exception as e:
                        st.error(f"‚ùå Erro na conex√£o: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è Insira uma API key para testar a conex√£o.")
        
        # G√™neros dispon√≠veis
        with st.expander("üìã G√™neros Dispon√≠veis", expanded=False):
            st.markdown("**G√™neros que o sistema pode sugerir automaticamente:**")
            col1, col2 = st.columns(2)
            
            for i, genero in enumerate(GENEROS_DISPONIVEIS):
                if i % 2 == 0:
                    with col1:
                        st.write(f"‚Ä¢ {genero}")
                else:
                    with col2:
                        st.write(f"‚Ä¢ {genero}")
        
        # Instru√ß√µes
        with st.expander("üìñ Como Usar", expanded=False):
            st.markdown("""
            **Como funciona a sugest√£o autom√°tica de g√™nero:**
            
            1. **Configure a API**: Insira sua API key do OpenRouter
            2. **Escolha o modelo**: Selecione o modelo de IA desejado
            3. **Ative a funcionalidade**: Marque a op√ß√£o de ativa√ß√£o
            4. **Use normalmente**: Ao catalogar livros, a sugest√£o ser√° autom√°tica
            
            **Processo de sugest√£o:**
            - O sistema analisa t√≠tulo, autor, editora e g√™nero atual
            - Busca contexto adicional no Google Books
            - Usa IA para sugerir um dos g√™neros dispon√≠veis
            - Sugere o g√™nero mais adequado para revis√£o
            """)
        
        # Salvar configura√ß√µes
        if st.button("üíæ Salvar Configura√ß√µes"):
            st.session_state.openrouter_config = config
            st.success("‚úÖ Configura√ß√µes salvas com sucesso!")
            st.rerun()
        
        return
    
    if page == "üì∑ Capturar C√≥digo de Barras":
        st.header("üì∑ Cataloga√ß√£o de Livros")
        
        # Input manual como m√©todo padr√£o
        st.subheader("üîç Inserir C√≥digo de Barras")
        st.info("Digite o c√≥digo de barras do livro para buscar suas informa√ß√µes automaticamente.")
        
        # Input manual - m√©todo padr√£o
        with st.form("manual_entry_form"):
            # Mostrar mensagem de sucesso se acabou de salvar
            if st.session_state.get("focus_input", False):
                st.success("‚úÖ Livro salvo com sucesso! Digite o pr√≥ximo c√≥digo de barras.")
                st.session_state.focus_input = False
                
                # JavaScript para focar automaticamente no campo
                st.markdown("""
                <script>
                setTimeout(function() {
                    var input = document.querySelector('input[data-testid="textInput"]');
                    if (input) {
                        input.focus();
                        input.select();
                    }
                }, 100);
                </script>
                """, unsafe_allow_html=True)
            
            # Usar chave din√¢mica para limpar o campo quando necess√°rio
            input_key = "barcode_input"
            if st.session_state.get("clear_input", False):
                input_key = f"barcode_input_{st.session_state.get('input_counter', 0)}"
                st.session_state.clear_input = False
                st.session_state.input_counter = st.session_state.get('input_counter', 0) + 1
            
            manual_barcode = st.text_input("C√≥digo de Barras:", placeholder="Digite o c√≥digo de barras do livro", key=input_key)
            
            # Bot√µes organizados: Buscar primeiro (recebe Enter do scanner), Limpar segundo
            col1, col2 = st.columns([2, 1])
            with col1:
                if st.form_submit_button("üöÄ Buscar Dados Online", type="primary"):
                    if manual_barcode:
                        st.session_state.codigo_barras = manual_barcode
                        st.session_state.force_search = True
                        st.rerun()
                    else:
                        st.warning("Por favor, digite um c√≥digo de barras.")
            with col2:
                if st.form_submit_button("üóëÔ∏è Limpar", help="Limpar o campo de c√≥digo de barras"):
                    st.session_state.codigo_barras = None
                    st.session_state.dados_livro = None
                    st.session_state.sources_used = []
                    st.session_state.from_autocomplete = False
                    st.session_state.force_search = False
                    st.session_state.clear_input = True
                    st.rerun()
        
        
        # Processar c√≥digo de barras se dispon√≠vel
        if "codigo_barras" in st.session_state and st.session_state.codigo_barras:
            codigo_barras = st.session_state.codigo_barras
            st.subheader(f"Dados para o C√≥digo de Barras: {codigo_barras}")
            
            dados_livro = None
            from_local = False  # Inicializar vari√°vel
            
            if "dados_livro" in st.session_state and not st.session_state.force_search:
                dados_livro = st.session_state.dados_livro
                sources_used = st.session_state.sources_used
                from_autocomplete = st.session_state.from_autocomplete
                # Verificar se veio do cat√°logo local
                from_local = st.session_state.get("from_local", False)
            else:
                with st.spinner("Buscando dados do livro..."):
                    dados_livro = search_local_catalog_first(codigo_barras)
                    sources_used = dados_livro.pop("sources")
                    from_local = dados_livro.pop("from_local", False)
                    st.session_state.dados_livro = dados_livro
                    st.session_state.sources_used = sources_used
                    st.session_state.from_local = from_local
                    st.session_state.force_search = False
                    from_autocomplete = False
            
            if dados_livro and dados_livro["title"] != "N/A":
                if from_local:
                    st.success("‚úÖ Dados do livro encontrados no cat√°logo local!")
                    st.info("üìö **Este livro j√° estava catalogado anteriormente.**")
                else:
                    st.success("‚úÖ Dados do livro encontrados online!")
                if from_autocomplete:
                    st.info("Este livro j√° existe no cat√°logo (sugest√£o do autocomplete).")
                
                # Preview removido para interface mais limpa
                
                
                # Sugest√£o autom√°tica de g√™nero
                config = get_openrouter_config()
                if config["enabled"] and config["api_key"]:
                    with st.spinner("ü§ñ Sugerindo g√™nero automaticamente..."):
                        # Buscar contexto adicional
                        contexto_adicional = search_additional_context(dados_livro)
                        
                        # Preparar dados para sugest√£o
                        dados_para_sugestao = dados_livro.copy()
                        if contexto_adicional:
                            dados_para_sugestao["contexto_adicional"] = contexto_adicional
                        
                        # Sugerir g√™nero com IA
                        genero_sugerido = suggest_genre_with_llm(dados_para_sugestao)
                        
                        if genero_sugerido:
                            st.success(f"üéØ **G√™nero sugerido pela IA:** {genero_sugerido}")
                            dados_livro["genero_sugerido"] = genero_sugerido
                            
                            # Mostrar contexto adicional se dispon√≠vel
                            if contexto_adicional:
                                with st.expander("üîç Contexto adicional encontrado", expanded=False):
                                    st.write(contexto_adicional)
                        else:
                            st.info("‚ÑπÔ∏è **IA n√£o conseguiu sugerir g√™nero automaticamente.** Preencha manualmente no formul√°rio abaixo.")
                
                # Autocomplete inteligente avan√ßado
                st.markdown("### üîç Sugest√µes Inteligentes (Cat√°logo Local)")
                
                # Busca por c√≥digo de barras exato
                exact_matches = check_existing_records(barcode=codigo_barras)
                if exact_matches:
                    st.success("üéØ **C√≥digo de barras j√° existe no cat√°logo!**")
                    for i, match in enumerate(exact_matches):
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"üìö **{match['dados']['Titulo']}**")
                            st.write(f"‚úçÔ∏è Autor: {match['dados']['Autor']}")
                            st.write(f"üè¢ Editora: {match['dados']['Editora']}")
                        with col2:
                            if st.button(f"‚ûï Adicionar C√≥pia", key=f"add_exact_{i}_{match['dados']['Codigo_Barras']}"):
                                save_to_csv(match["dados"], quantity=1)
                                st.success(f"C√≥pia adicionada!")
                                load_catalog_data.clear()
                                st.rerun()
                
                # Busca por t√≠tulo similar
                similar_books = find_similar_books(dados_livro["title"], "title", 0.7)
                if similar_books:
                    st.markdown("#### üìñ Livros com T√≠tulos Similares:")
                    for i, book in enumerate(similar_books):
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"üìö **{book['data']['Titulo']}** (Similaridade: {book['similarity']:.2f})")
                            st.write(f"‚úçÔ∏è Autor: {book['data']['Autor']}")
                        with col2:
                            if st.button(f"‚ûï Usar Dados", key=f"use_similar_title_{i}_{book['data']['Codigo_Barras']}"):
                                st.session_state.dados_livro = {
                                    "title": book['data']['Titulo'],
                                    "author": book['data']['Autor'],
                                    "publisher": book['data']['Editora'],
                                    "genre": book['data']['Genero']
                                }
                                st.rerun()
                
                # Busca por autor similar
                similar_authors = find_similar_books(dados_livro["author"], "Autor", 0.8)
                if similar_authors:
                    st.markdown("#### ‚úçÔ∏è Livros do Mesmo Autor:")
                    for i, book in enumerate(similar_authors[:3]):  # Mostrar apenas 3
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"üìö **{book['data']['Titulo']}**")
                            st.write(f"‚úçÔ∏è Autor: {book['data']['Autor']}")
                        with col2:
                            if st.button(f"‚ûï Usar Dados", key=f"use_author_{i}_{book['data']['Codigo_Barras']}"):
                                st.session_state.dados_livro = {
                                    "title": book['data']['Titulo'],
                                    "author": book['data']['Autor'],
                                    "publisher": book['data']['Editora'],
                                    "genre": book['data']['Genero']
                                }
                                st.rerun()
                
                if not exact_matches and not similar_books and not similar_authors:
                    st.info("Nenhum livro similar encontrado no cat√°logo local.")
                
                # Formul√°rio edit√°vel para revisar e completar dados
                st.markdown("### üìù Revisar e Editar Dados do Livro")
                st.info("Revise os dados encontrados e edite conforme necess√°rio antes de salvar no cat√°logo.")
                st.markdown("**üìã Campos obrigat√≥rios:** T√≠tulo, Autor, Editora e G√™nero | **Quantidade:** Valor padr√£o 1")
                
                with st.form("edit_book_data_form"):
                    col1, col2 = st.columns(2)
                
                    with col1:
                        st.markdown("#### üìö Informa√ß√µes B√°sicas")
                        final_barcode = st.text_input("C√≥digo de Barras:", value=codigo_barras, disabled=True)
                        # Usar autocomplete baseado em registros anteriores
                        final_title = create_autocomplete_widget(
                            "T√≠tulo", "title", 
                            dados_livro.get("title", ""), 
                            "Campo obrigat√≥rio"
                        )
                        final_author = create_autocomplete_widget(
                            "Autor", "author", 
                            dados_livro.get("author", ""), 
                            "Campo obrigat√≥rio"
                        )
                    
                    with col2:
                        st.markdown("#### üè¢ Detalhes Adicionais")
                        final_publisher = create_autocomplete_widget(
                            "Editora", "publisher", 
                            dados_livro.get("publisher", ""), 
                            "Campo obrigat√≥rio"
                        )
                        
                        # Campo de g√™nero com sugest√£o da IA e autocomplete
                        genero_atual = dados_livro.get("genero_sugerido", dados_livro.get("genre", ""))
                        
                        # Obter sugest√µes de g√™nero do cat√°logo local
                        genero_suggestions = get_all_unique_values("genre")
                        all_genres = list(set(GENEROS_DISPONIVEIS + genero_suggestions))
                        all_genres.sort()
                        
                        if genero_atual and genero_atual in all_genres:
                            index_genero = all_genres.index(genero_atual) + 1
                        else:
                            index_genero = 0  # Deixar em branco se n√£o houver sugest√£o v√°lida
                        
                        final_genre = st.selectbox(
                            "G√™nero *:",
                            options=[""] + all_genres,
                            index=index_genero,
                            help="Campo obrigat√≥rio - G√™nero sugerido pela IA e baseado em registros anteriores"
                        )
                        
                        quantity = st.number_input("Quantidade de C√≥pias:", min_value=1, value=1, step=1, help="Valor padr√£o: 1")
                    
                    # Bot√µes de a√ß√£o
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        save_button = st.form_submit_button("üíæ Salvar no Cat√°logo", type="primary")
                    with col2:
                        clear_button = st.form_submit_button("üóëÔ∏è Limpar Formul√°rio")
                    with col3:
                        search_again_button = st.form_submit_button("üîç Buscar Novamente")
                    
                    if save_button:
                        # Validar todos os campos obrigat√≥rios
                        missing_fields = []
                        if not final_title.strip():
                            missing_fields.append("T√≠tulo")
                        if not final_author.strip():
                            missing_fields.append("Autor")
                        if not final_publisher.strip():
                            missing_fields.append("Editora")
                        if not final_genre.strip():
                            missing_fields.append("G√™nero")
                        
                        if missing_fields:
                            st.error(f"‚ùå **Campos obrigat√≥rios n√£o preenchidos:** {', '.join(missing_fields)}")
                            st.warning("‚ö†Ô∏è **Todos os campos marcados com * s√£o obrigat√≥rios!**")
                        else:
                            save_data = {
                                "barcode": final_barcode,
                                "title": final_title.strip(),
                                "author": final_author.strip(),
                                "publisher": final_publisher.strip(),
                                "genre": final_genre.strip()
                            }
                            save_to_csv(save_data, quantity)
                            st.success(f"‚úÖ {quantity} c√≥pia(s) de '{final_title}' adicionada(s) ao cat√°logo!")
                            st.balloons()
                            load_catalog_data.clear() # Invalida o cache
                            
                            # Limpar dados da sess√£o e focar no input
                            for key in ["codigo_barras", "dados_livro", "sources_used", "from_autocomplete", "force_search", "fallback_title_input"]:
                                if key in st.session_state:
                                    del st.session_state[key]
                            
                            # Marcar para focar no input ap√≥s salvar e limpar o campo
                            st.session_state.focus_input = True
                            st.session_state.clear_input = True
                            st.rerun()
                    
                    elif clear_button:
                        # Limpar dados da sess√£o
                        for key in ["codigo_barras", "dados_livro", "sources_used", "from_autocomplete", "force_search", "fallback_title_input"]:
                            if key in st.session_state:
                                del st.session_state[key]
                        st.rerun()
                    
                    elif search_again_button:
                        # For√ßar nova busca
                        st.session_state.force_search = True
                        st.rerun()
            else:
                st.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar dados para este c√≥digo de barras nas fontes online.")
                
                # Op√ß√£o 1: Busca por t√≠tulo
                st.markdown("### üîç Op√ß√£o 1: Buscar por T√≠tulo")
                with st.form("fallback_title_search_form"):
                    fallback_title = st.text_input("T√≠tulo do Livro:", value=st.session_state.get("fallback_title_input", ""))
                    st.session_state.fallback_title_input = fallback_title
                    if st.form_submit_button("üîç Buscar por T√≠tulo"):
                        if fallback_title:
                            with st.spinner("Buscando por t√≠tulo..."):
                                title_data = search_google_books_by_title(fallback_title)
                                if title_data:
                                    st.success("‚úÖ Livro encontrado por t√≠tulo!")
                                    st.session_state.dados_livro = {
                                        "barcode": codigo_barras, # Mant√©m o barcode original
                                        "title": title_data["title"],
                                        "author": title_data["author"],
                                        "publisher": title_data["publisher"],
                                        "genre": title_data["genre"]
                                    }
                                    st.session_state.sources_used = ["Google Books (T√≠tulo)"]
                                    st.session_state.from_autocomplete = False
                                    st.rerun()
                                else:
                                    st.error("‚ùå N√£o foi poss√≠vel encontrar o livro por este t√≠tulo.")
                        else:
                            st.warning("Por favor, digite um t√≠tulo para buscar.")
                
                # Op√ß√£o 2: Preenchimento manual completo
                st.markdown("### ‚úèÔ∏è Op√ß√£o 2: Preenchimento Manual")
                st.info("Preencha manualmente os dados do livro que n√£o foram encontrados online.")
                st.markdown("**üìã Campos obrigat√≥rios:** T√≠tulo, Autor, Editora e G√™nero | **Quantidade:** Valor padr√£o 1")
                
                with st.form("manual_book_data_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("#### üìö Informa√ß√µes B√°sicas")
                        manual_barcode = st.text_input("C√≥digo de Barras:", value=codigo_barras, disabled=True)
                        # Usar autocomplete baseado em registros anteriores
                        manual_title = create_autocomplete_widget(
                            "T√≠tulo", "title", 
                            "", 
                            "Campo obrigat√≥rio"
                        )
                        manual_author = create_autocomplete_widget(
                            "Autor", "author", 
                            "", 
                            "Campo obrigat√≥rio"
                        )
                    
                    with col2:
                        st.markdown("#### üè¢ Detalhes Adicionais")
                        manual_publisher = create_autocomplete_widget(
                            "Editora", "publisher", 
                            "", 
                            "Campo obrigat√≥rio"
                        )
                        
                        # G√™nero com sugest√µes do cat√°logo local
                        genero_suggestions = get_all_unique_values("genre")
                        all_genres = list(set(GENEROS_DISPONIVEIS + genero_suggestions))
                        all_genres.sort()
                        
                        manual_genre = st.selectbox(
                            "G√™nero *:",
                            options=[""] + all_genres,
                            help="Campo obrigat√≥rio - Selecione o g√™nero do livro (sugest√µes baseadas em registros anteriores)"
                        )
                        manual_quantity = st.number_input("Quantidade de C√≥pias:", min_value=1, value=1, step=1, help="Valor padr√£o: 1")
                    
                    # Bot√µes de a√ß√£o
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        manual_save_button = st.form_submit_button("üíæ Salvar no Cat√°logo", type="primary")
                    with col2:
                        manual_clear_button = st.form_submit_button("üóëÔ∏è Limpar Formul√°rio")
                    with col3:
                        manual_search_button = st.form_submit_button("üîç Buscar por T√≠tulo")
                    
                    if manual_save_button:
                        # Validar todos os campos obrigat√≥rios
                        missing_fields = []
                        if not manual_title.strip():
                            missing_fields.append("T√≠tulo")
                        if not manual_author.strip():
                            missing_fields.append("Autor")
                        if not manual_publisher.strip():
                            missing_fields.append("Editora")
                        if not manual_genre.strip():
                            missing_fields.append("G√™nero")
                        
                        if missing_fields:
                            st.error(f"‚ùå **Campos obrigat√≥rios n√£o preenchidos:** {', '.join(missing_fields)}")
                            st.warning("‚ö†Ô∏è **Todos os campos marcados com * s√£o obrigat√≥rios!**")
                        else:
                            save_data = {
                                "barcode": manual_barcode,
                                "title": manual_title.strip(),
                                "author": manual_author.strip(),
                                "publisher": manual_publisher.strip(),
                                "genre": manual_genre.strip()
                            }
                            save_to_csv(save_data, manual_quantity)
                            st.success(f"‚úÖ {manual_quantity} c√≥pia(s) de '{manual_title}' adicionada(s) ao cat√°logo!")
                            st.balloons()
                            load_catalog_data.clear() # Invalida o cache
                            
                            # Limpar dados da sess√£o
                            for key in ["codigo_barras", "dados_livro", "sources_used", "from_autocomplete", "force_search", "fallback_title_input"]:
                                if key in st.session_state:
                                    del st.session_state[key]
                            st.rerun()
                    
                    elif manual_clear_button:
                        # Limpar dados da sess√£o
                        for key in ["codigo_barras", "dados_livro", "sources_used", "from_autocomplete", "force_search", "fallback_title_input"]:
                            if key in st.session_state:
                                del st.session_state[key]
                        st.rerun()
                    
                    elif manual_search_button:
                        if manual_title:
                            with st.spinner("Buscando por t√≠tulo..."):
                                title_data = search_google_books_by_title(manual_title)
                                if title_data:
                                    st.success("‚úÖ Livro encontrado por t√≠tulo!")
                                    st.session_state.dados_livro = {
                                        "barcode": codigo_barras,
                                        "title": title_data["title"],
                                        "author": title_data["author"],
                                        "publisher": title_data["publisher"],
                                        "genre": title_data["genre"]
                                    }
                                    st.session_state.sources_used = ["Google Books (T√≠tulo)"]
                                    st.session_state.from_autocomplete = False
                                    st.rerun()
                                else:
                                    st.error("‚ùå N√£o foi poss√≠vel encontrar o livro por este t√≠tulo.")
                        else:
                            st.warning("Por favor, digite um t√≠tulo para buscar.")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üóëÔ∏è Limpar Formul√°rio"):
                    for key in ["codigo_barras", "dados_livro", "sources_used", "from_autocomplete", "force_search", "fallback_title_input"]:
                        if key in st.session_state:
                            del st.session_state[key]
                    st.rerun()
    
    elif page == "üîç Buscar Livros":
        st.header("üîç Busca Inteligente de Livros")
        st.info("Use esta ferramenta para encontrar livros no cat√°logo local usando busca inteligente e auto-complete.")
        
        # Op√ß√µes de busca
        search_type = st.radio(
            "Tipo de busca:",
            ["üìö Por T√≠tulo", "‚úçÔ∏è Por Autor", "üè¢ Por Editora", "üìñ Por G√™nero"]
        )
        
        if search_type == "üìö Por T√≠tulo":
            st.subheader("Busca por T√≠tulo")
            search_query = st.text_input("Digite o t√≠tulo do livro:", placeholder="Digite parte do t√≠tulo...")
            
            if search_query:
                # Auto-complete em tempo real
                suggestions = get_autocomplete_suggestions(search_query, "Titulo")
                if suggestions:
                    st.markdown("#### üí° Sugest√µes:")
                    for i, suggestion in enumerate(suggestions):
                        if st.button(f"üìö {suggestion['text']}", key=f"title_suggest_{i}_{suggestion['data']['Codigo_Barras']}"):
                            st.session_state.search_result = suggestion['data']
                            st.rerun()
                
                # Busca por similaridade
                similar_books = find_similar_books(search_query, "Titulo", 0.5)
                if similar_books:
                    st.markdown("#### üìñ Resultados da Busca:")
                    for i, book in enumerate(similar_books):
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"üìö **{book['data']['Titulo']}** (Similaridade: {book['similarity']:.2f})")
                            st.write(f"‚úçÔ∏è Autor: {book['data']['Autor']}")
                            st.write(f"üè¢ Editora: {book['data']['Editora']}")
                        with col2:
                            if st.button(f"‚ûï Adicionar C√≥pia", key=f"add_search_{i}_{book['data']['Codigo_Barras']}"):
                                save_to_csv(book["data"], quantity=1)
                                st.success(f"C√≥pia adicionada!")
                                load_catalog_data.clear()
                                st.rerun()
        
        elif search_type == "‚úçÔ∏è Por Autor":
            st.subheader("Busca por Autor")
            search_query = st.text_input("Digite o nome do autor:", placeholder="Digite parte do nome...")
            
            if search_query:
                suggestions = get_autocomplete_suggestions(search_query, "Autor")
                if suggestions:
                    st.markdown("#### üí° Sugest√µes:")
                    for i, suggestion in enumerate(suggestions):
                        if st.button(f"‚úçÔ∏è {suggestion['text']}", key=f"author_suggest_{i}_{suggestion['data']['Codigo_Barras']}"):
                            st.session_state.search_result = suggestion['data']
                            st.rerun()
                
                similar_books = find_similar_books(search_query, "Autor", 0.6)
                if similar_books:
                    st.markdown("#### üìñ Livros do Autor:")
                    for i, book in enumerate(similar_books):
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"üìö **{book['data']['Titulo']}**")
                            st.write(f"‚úçÔ∏è Autor: {book['data']['Autor']}")
                        with col2:
                            if st.button(f"‚ûï Adicionar C√≥pia", key=f"add_author_{i}_{book['data']['Codigo_Barras']}"):
                                save_to_csv(book["data"], quantity=1)
                                st.success(f"C√≥pia adicionada!")
                                load_catalog_data.clear()
                                st.rerun()
        
        elif search_type == "üè¢ Por Editora":
            st.subheader("Busca por Editora")
            search_query = st.text_input("Digite o nome da editora:", placeholder="Digite parte do nome...")
            
            if search_query:
                suggestions = get_autocomplete_suggestions(search_query, "Editora")
                if suggestions:
                    st.markdown("#### üí° Sugest√µes:")
                    for i, suggestion in enumerate(suggestions):
                        if st.button(f"üè¢ {suggestion['text']}", key=f"publisher_suggest_{i}_{suggestion['data']['Codigo_Barras']}"):
                            st.session_state.search_result = suggestion['data']
                            st.rerun()
                
                similar_books = find_similar_books(search_query, "Editora", 0.6)
                if similar_books:
                    st.markdown("#### üìñ Livros da Editora:")
                    for i, book in enumerate(similar_books):
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"üìö **{book['data']['Titulo']}**")
                            st.write(f"üè¢ Editora: {book['data']['Editora']}")
                        with col2:
                            if st.button(f"‚ûï Adicionar C√≥pia", key=f"add_publisher_{i}_{book['data']['Codigo_Barras']}"):
                                save_to_csv(book["data"], quantity=1)
                                st.success(f"C√≥pia adicionada!")
                                load_catalog_data.clear()
                                st.rerun()
        
        elif search_type == "üìñ Por G√™nero":
            st.subheader("Busca por G√™nero")
            search_query = st.text_input("Digite o g√™nero:", placeholder="Digite parte do g√™nero...")
            
            if search_query:
                suggestions = get_autocomplete_suggestions(search_query, "Genero")
                if suggestions:
                    st.markdown("#### üí° Sugest√µes:")
                    for i, suggestion in enumerate(suggestions):
                        if st.button(f"üìñ {suggestion['text']}", key=f"genre_suggest_{i}_{suggestion['data']['Codigo_Barras']}"):
                            st.session_state.search_result = suggestion['data']
                            st.rerun()
                
                similar_books = find_similar_books(search_query, "Genero", 0.6)
                if similar_books:
                    st.markdown("#### üìñ Livros do G√™nero:")
                    for i, book in enumerate(similar_books):
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"üìö **{book['data']['Titulo']}**")
                            st.write(f"üìñ G√™nero: {book['data']['Genero']}")
                        with col2:
                            if st.button(f"‚ûï Adicionar C√≥pia", key=f"add_genre_{i}_{book['data']['Codigo_Barras']}"):
                                save_to_csv(book["data"], quantity=1)
                                st.success(f"C√≥pia adicionada!")
                                load_catalog_data.clear()
                                st.rerun()
        
        # Mostrar resultado selecionado
        if "search_result" in st.session_state:
            st.markdown("---")
            st.markdown("### üìã Livro Selecionado:")
            result = st.session_state.search_result
            col1, col2 = st.columns([3, 1])
            with col1:
                st.write(f"üìö **T√≠tulo:** {result['Titulo']}")
                st.write(f"‚úçÔ∏è **Autor:** {result['Autor']}")
                st.write(f"üè¢ **Editora:** {result['Editora']}")
                st.write(f"üìñ **G√™nero:** {result['Genero']}")
                st.write(f"üî¢ **C√≥digo de Barras:** {result['Codigo_Barras']}")
            with col2:
                if st.button("‚ûï Adicionar C√≥pia"):
                    save_to_csv(result, quantity=1)
                    st.success("C√≥pia adicionada!")
                    load_catalog_data.clear()
                    st.rerun()
                if st.button("üóëÔ∏è Limpar Sele√ß√£o"):
                    del st.session_state.search_result
                    st.rerun()
    
    elif page == "üìä Visualizar Cat√°logo":
        st.header("üìä Cat√°logo de Livros")
        df_catalog = load_catalog_data()
        
        if not df_catalog.empty:
            st.dataframe(df_catalog)
            st.markdown(f"**Total de livros catalogados:** {len(df_catalog)}")
            
            # Estat√≠sticas b√°sicas
            st.subheader("Estat√≠sticas R√°pidas")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Autores √önicos", df_catalog["Autor"].nunique())
            with col2:
                st.metric("Editoras √önicas", df_catalog["Editora"].nunique())
            with col3:
                st.metric("G√™neros √önicos", df_catalog["Genero"].nunique())
            
            st.subheader("Livros Mais Frequentes")
            st.dataframe(df_catalog["Titulo"].value_counts().head(10))
            
        else:
            st.info("O cat√°logo est√° vazio. Comece a catalogar livros na aba 'Capturar C√≥digo de Barras'.")
    
    elif page == "üì• Download CSV":
        st.header("üì• Download do Cat√°logo CSV")
        df_catalog = load_catalog_data()
        
        if not df_catalog.empty:
            csv_output = df_catalog.to_csv(index=False).encode("utf-8")
            st.download_button(
                label="Baixar catalogo_livros.csv",
                data=csv_output,
                file_name="catalogo_livros.csv",
                mime="text/csv",
            )
        else:
            st.info("O cat√°logo est√° vazio. N√£o h√° dados para baixar.")

if __name__ == "__main__":
    main()

